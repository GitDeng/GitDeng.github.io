<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Actual_combat_project | 程序员笔记]]></title>
  <link href="http://gitdeng.github.io/blog/categories/actual-combat-project/atom.xml" rel="self"/>
  <link href="http://gitdeng.github.io/"/>
  <updated>2015-07-21T23:53:58+08:00</updated>
  <id>http://gitdeng.github.io/</id>
  <author>
    <name><![CDATA[程序员笔记]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android实战项目——倒计时]]></title>
    <link href="http://gitdeng.github.io/blog/2015/07/21/Android-project-actual-combat-Countdown/"/>
    <updated>2015-07-21T20:39:20+08:00</updated>
    <id>http://gitdeng.github.io/blog/2015/07/21/Android-project-actual-combat-Countdown</id>
    <content type="html"><![CDATA[<h2>项目背景</h2>

<p>在Android系统中UI操作并不是线程安全的，如果多个线程并发的去操作同一个组件，可能导致线程安全问题。为了解决这一个问题，Android 制定了一条规则：只允许 UI 线程来修改 UI 组件的属性等，也就是说必须单线程模型，这样导致如果在UI界面进行一个耗时较长的数据更新等就会形成程序假死现象，也就是ANR异常，如果20秒中没有完成程序就会强制关闭。所以比如另一个线程要修改UI组件的时候，就需要借助Handler消息机制了。</p>

<h2>核心内容</h2>

<p>1 UI布局<br/>
2 Handler创建<br/>
3 计时器创建<br/>
4 逻辑实现</p>

<h2>代码示例</h2>

<h3>1 AndroidManifest.xml</h3>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="cn.loverobots.counttime" &gt;
    &lt;application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/AppTheme" &gt;
        &lt;activity
            android:name=".MainActivity"
            android:label="@string/app_name" &gt;
            &lt;intent-filter&gt;
                &lt;action android:name="android.intent.action.MAIN" /&gt;

                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
    &lt;/application&gt;
&lt;/manifest&gt;
</code></pre>

<h3>2 MainActivity.java</h3>

<pre><code>package cn.loverobots.counttime;

import android.os.Handler;
import android.os.Message;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import java.util.Timer;
import java.util.TimerTask;

public class MainActivity extends ActionBarActivity implements View.OnClickListener{

    private EditText inputTime;
    private TextView displayTime;
    private Button btnGetTime,btnStartTime,btnStopTime;
    private int countTime = 0;
    private Timer timer;
    private TimerTask timerTask;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();//初始化需要的View
    }

    /**
     * 所有View的初始化全部放在一个initView()方法中，让程序显得更简洁
     */
    private void initView(){
        inputTime = (EditText) findViewById(R.id.inputTime);
        displayTime = (TextView) findViewById(R.id.displayTime);
        btnGetTime = (Button) findViewById(R.id.btnGetTime);
        btnStartTime = (Button) findViewById(R.id.btnStartTime);
        btnStopTime = (Button) findViewById(R.id.btnStopTime);

        btnGetTime.setOnClickListener(this);
        btnStartTime.setOnClickListener(this);
        btnStopTime.setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.btnGetTime:
                displayTime.setText(inputTime.getText().toString());//显示倒计时处显示输入的时间
                countTime = Integer.parseInt(inputTime.getText().toString());//获取输入的时间做计时准备
                break;
            case R.id.btnStartTime:
                startTime();
                break;
            case R.id.btnStopTime:
                stopTime();
                break;
        }
    }
    //注意，这里导入的是android.os.Handler这个Handler
    private Handler countHandler = new Handler(){
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            //由于setText()中只能传递字符串，而msg.arg1中传递的数据类型是int型的，需要转换为字符串类型
            displayTime.setText(msg.arg1+"");
            //再次启动计时器，进入循环
            startTime();
        }
    };

    private void startTime(){
        timer = new Timer();
        timerTask = new TimerTask() {
            @Override
            public void run() {
                countTime--;
                Message message = countHandler.obtainMessage();//获取消息
                message.arg1 = countTime;
                countHandler.sendMessage(message);//发送消息
            }
        };
        //启动计时器
        timer.schedule(timerTask,1000);
    }

    private void stopTime(){
        timer.cancel();
    }
}
</code></pre>

<h3>3 activity_main.xml</h3>

<pre><code>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:orientation="vertical"
    tools:context=".MainActivity"&gt;

    &lt;EditText
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:id="@+id/inputTime" /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="获取倒计时时间(秒)"
        android:id="@+id/btnGetTime" /&gt;

    &lt;TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text=""
        android:id="@+id/displayTime" /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="开始计时"
        android:id="@+id/btnStartTime" /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="停止计时"
        android:id="@+id/btnStopTime" /&gt;
&lt;/LinearLayout&gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
