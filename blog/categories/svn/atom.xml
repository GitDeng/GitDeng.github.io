<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Svn | 程序员笔记]]></title>
  <link href="http://gitdeng.github.io/blog/categories/svn/atom.xml" rel="self"/>
  <link href="http://gitdeng.github.io/"/>
  <updated>2015-07-19T01:15:02+08:00</updated>
  <id>http://gitdeng.github.io/</id>
  <author>
    <name><![CDATA[程序员笔记]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[认识SVN]]></title>
    <link href="http://gitdeng.github.io/blog/2015/07/06/svn-profile/"/>
    <updated>2015-07-06T22:39:20+08:00</updated>
    <id>http://gitdeng.github.io/blog/2015/07/06/svn-profile</id>
    <content type="html"><![CDATA[<h2>1 SVN的介绍</h2>

<p>SVN是Subversion的简称，是一个开放源代码的版本控制系统，相较于RCS、CVS（现在已经不流行了），它采用了分支管理系统，它的设计目标就是取代CVS。互联网上很多版本控制服务已从CVS迁移到Subversion。平时我们在开发的过程中以及团队的配合中，SVN应用的特别多，所以我们要熟练的使用SVN开发分支、合并主干、处理分支。</p>

<h3>1.1 SVN原理</h3>

<p>通俗的理解是：<br/>
（1）SVN有一条“主干”保存最新版本，不允许直接往上提交。<br/>
（2）每个用户在使用前，都需要从主干上某个时间点拉下对应的一个“分支”。<br/>
（3）当每个用户修改完成新版本准备提交时，需要检查主干上是否存在“其拉下分支后其他用户的新的提交”。如果有，则需要再次从最新节点处拉下新分支重新整合“提交”；如果没有，则可以直接“提交”。<br/>
（4）同时，SVN中存在一个“tags”，它是每个用户提交上线关键点的“备份”，用于执行发现问题时的回滚等操作。</p>

<h2>2 SVN和Git的比较</h2>

<p>SVN基于文件夹的操作，Git是基于流式的操作。</p>

<h2>3 SVN的安装</h2>

<p>在Windows平台上多使用TortoiseSVN这款SVN工具。</p>

<p>TortoiseSVN（俗称“小乌龟”）是Subversion版本控制系统的一个免费开源客户端，可以超越时间的管理文件和目录。文件保存在中央版本库，除了能记住文件和目录的每次修改以外，版本库非常像普通的文件服务器。你可以将文件恢复到过去的版本，并且可以通过检查历史知道数据做了哪些修改，谁做的修改。这就是为什么许多人将Subversion和版本控制系统看作一种“时间机器”。</p>

<p><em><a href="http://tortoisesvn.net/">TortoiseSVN官方网站</a><br/>
</em><a href="http://www.cnblogs.com/xilentz/archive/2010/05/06/1728945.html">TotoiseSVN的基本使用方法</a></p>
]]></content>
  </entry>
  
</feed>
