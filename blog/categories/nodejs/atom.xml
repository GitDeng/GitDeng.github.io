<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nodejs | My Octopress Blog]]></title>
  <link href="http://gitdeng.github.io/blog/categories/nodejs/atom.xml" rel="self"/>
  <link href="http://gitdeng.github.io/"/>
  <updated>2015-07-15T15:34:41+08:00</updated>
  <id>http://gitdeng.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[认识Nodejs]]></title>
    <link href="http://gitdeng.github.io/blog/2015/07/07/Nodejs-profile/"/>
    <updated>2015-07-07T10:39:20+08:00</updated>
    <id>http://gitdeng.github.io/blog/2015/07/07/Nodejs-profile</id>
    <content type="html"><![CDATA[<h2>1 Nodejs的介绍</h2>

<p>JS是脚本语言，脚本语言都需要一个解析器才能运行。对于写在HTML页面里的JS，浏览器充当了解析器的角色。而对于需要独立运行的JS，NodeJS就是一个解析器。</p>

<p>Node.js是建立在Chrome的JavaScript的运行时，可方便地构建快速，可扩展的网络应用程序的平台。Node.js使用事件驱动，非阻塞I/O模型，轻量、高效，可以完美地处理时时数据，运行在不同的设备上。</p>

<p>每一种解析器都是一个运行环境，不但允许JS定义各种数据结构，进行各种计算，还允许JS使用运行环境提供的内置对象和方法做一些事情。例如运行在浏览器中的JS的用途是操作DOM，浏览器就提供了document之类的内置对象。而运行在Nodejs中的JS的用途是操作磁盘文件或搭建HTTP服务器，NodeJS就相应提供了fs、http等内置对象。</p>

<h2>2 Nodejs使用领域</h2>

<p>尽管存在一听说可以直接运行JS文件就觉得很酷的同学，但大多数同学在接触新东西时首先关心的是有啥用处，以及能带来啥价值。Nodejs的作者说，他创造NodeJS的目的是为了实现高性能Web服务器，他首先看重的是事件机制和异步IO模型的优越性，而不是JS。但是他需要选择一种编程语言实现他的想法，这种编程语言不能自带IO功能，并且需要能良好支持事件机制。JS没有自带IO功能，天生就用于处理浏览器中的 DOM事件，并且拥有一大群程序员，因此就成为了天然的选择。</p>

<p>如他所愿，Nodejs在服务端活跃起来，出现了大批基于NodeJS的Web服务。而另一方面，NodeJS让前端众如获神器，终于可以让自己的能力覆盖范围跳出浏览器窗口，更大批的前端工具如雨后春笋。</p>

<p>从<a href="https://github.com/joyent/node/wiki/Projects,-Applications,-and-Companies-Using-Node">Nodejs官方网站的企业登记页</a>来看，包括我们熟知的公司有LinkedIn, Yahoo, Paypal, eBay, Walmart，Groupon 还有很多的中小型公司，国内的公司如雪球、淘宝、网易、百度等也都有很多项目运行在Node.js之上。</p>

<p>因此，对于前端而言，虽然不是人人都要拿NodeJS写一个服务器程序，但简单可至使用命令交互模式调试JS代码片段，复杂可至编写工具提升工作效率。</p>

<h2>3 Nodejs的优势</h2>

<h3>3.1 总的来看，Nodejs的优势如下</h3>

<p>3.1.1 Nodejs基于Javascript语言，不用再单独新学一门陌生的语言，从而减低了学习的门槛。同时，Javascript语言在Web前端开发中至关重要，特别HTML5的应用必须要使用，所以前后台统一语言，不仅可以实现程序员的全栈开发，还可以统一公共类库，代码标准化。单凭这一点，Nodejs就已经赢得市场的青睐了。</p>

<p>3.1.2 Nodejs并没有重新开发运行时环境，而是选择了目前最快的浏览器内核V8作为执行引擎，保证了Nodejs的性能和稳定性。</p>

<p>3.1.3 Nodejs的开发非常高效，而且代码简单，得益于Nodejs的单线程机制。而Nodejs的另一个特点异步编程，让Nodejs处理IO密集型应用有了明显的优势。个人感觉，用Nodejs比Java做Web开发要高效10倍，比PHP的代码还要简单。</p>

<p>3.1.4 Nodejs的社区在壮大，不仅包的数量在快速增加，而且包的质量也要明显好于其他语言的。很多明星级的包，都是简单而灵巧的，为了开发者的使用习惯而设计。常用到的工具包，如socket.io, moment.js, underscore.js, async.js, express.js, bower.js, grunt.js, forever.js&hellip;&hellip;</p>

<h3>3.2 另外，ebay选择Nodejs的理由，可以归纳为以下4点：</h3>

<p>3.2.1 动态语言：开发效率非常高，并有能力构建复杂系统，如ql.io。
3.2.2 性能和I/O负载：Nodejs非常好的解决了IO密集的问题，通过异步IO来实现。
3.2.3 连接的内存开销：每个Node.js进程可以支持超过12万活跃的连接，每个连接消耗大约2K的内存。
3.2.4 操作性：实现了Nodejs对于内存堆栈的监控系统。</p>

<h2>4 Nodejs不适合的领域</h2>

<p>每一种语言或平台都有不擅长领域，对于Nodejs来说最不擅长的领域在于CPU和内存的编程操作。</p>

<p>4.1 计算密集型应用，让Javascript和C去拼计算性能，估计是不可能赢的。</p>

<p>4.2 内存控制，让Javascript和Java比较复杂数据类型定义，也是很困难的。因为Javascript的面向对象是基于JSON的，而Java是直接使用内存结构。所以，通过JSON序列化和反序列的过程控制内存，Javascript就已经输了。</p>

<p>4.3 大内存的应用，由于V8引擎有内存设计的限制，32位环境中最大堆是1G，64位环境中最大堆也不到2G，如果要一次读入10G数据，对于Nodejs来说也无法实现。</p>

<p>4.4 静态服务器，虽然Nodejs的优势在IO密集集应用，但是和Nginx的处理静态资源还是有很大的差距。</p>

<p>4.5 不需要异步的应用：比如系统管理，自行化脚本等，还是Python更顺手，Nodejs的异步调用可能会给编程带来一些麻烦。</p>

<p>*<a href="http://www.open-open.com/news/tags/Node.js">Nodejs学习资料</a></p>
]]></content>
  </entry>
  
</feed>
