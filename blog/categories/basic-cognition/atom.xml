<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Basic_cognition | 程序员笔记]]></title>
  <link href="http://gitdeng.github.io/blog/categories/basic-cognition/atom.xml" rel="self"/>
  <link href="http://gitdeng.github.io/"/>
  <updated>2015-07-21T23:53:58+08:00</updated>
  <id>http://gitdeng.github.io/</id>
  <author>
    <name><![CDATA[程序员笔记]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[认识Android]]></title>
    <link href="http://gitdeng.github.io/blog/2015/07/07/Android-profile/"/>
    <updated>2015-07-07T12:39:20+08:00</updated>
    <id>http://gitdeng.github.io/blog/2015/07/07/Android-profile</id>
    <content type="html"><![CDATA[<h2>1 IT发展趋势</h2>

<h3>1.1 IT发展趋势</h3>

<p>1.1.1 第一代：代表机型：大型机，代表公司：IBM公司。<br/>
1.1.2 第二代：代表机型：PC机，代表公司：苹果与微软公司。<br/>
1.1.3 第三代：代表技术：互联网，代表公司：谷歌与百度公司。<br/>
1.1.4 第四代：代表技术：移动互联网。代表公司：谷歌、苹果。</p>

<h3>1.2 互联网用户的变化趋势</h3>

<p>1.2.1 据工信部统计：2013年中国移动互联网用户达到7.5亿，3G用户数2.2亿。</p>

<h2>2 无线通讯技术发展趋势</h2>

<p>2.1 第一代无线通讯技术：1G（模拟）。<br/>
2.2 第二代无线通讯技术：2G（数字）。TDMA,GSM,CDMA,GPRS,EDGE。<br/>
2.3 第三代无线通讯技术：3G。WCDMA，TD-SCDMA。<br/>
2.4 第四代无线通讯技术：4G。LTE（Long Term Evolution，长期演进技术）是3G的演进。</p>

<h2>3 智能手机开发概述</h2>

<h3>3.1 智能手机开发前景</h3>

<p>3.1.1 掌握了移动终端就是拿到了未来成功的门票。<br/>
3.1.2 北、上、广、深每天的Android开发工程师招聘人数庞大且薪资待遇普遍偏高。</p>

<h3>3.2 智能手机操作系统</h3>

<p>3.2.1 Symbian：诺基亚公司手机操作系统。<br/>
3.2.2 BlackBerryOS（RIM）：黑莓手机操作系统。<br/>
3.2.3 iOS：苹果手机操作系统。<br/>
3.2.4 Android：目前是开源手机操作系统，由谷歌公司主导（市场占有率最高，且遥遥领先）<br/>
3.2.5 Windows Phone：微软公司手机操作系统。</p>

<h2>4 Android概述</h2>

<h3>4.1 什么是Android</h3>

<p>4.1.1 Android一词最早出现于法国作家利尔亚当（Auguste Villiers de l'Isle-Adam）在1886年发表的科幻小说《未来夏娃》（L'ève future）中。他将外表像人的机器起名为Android。</p>

<h3>4.2 Android系统</h3>

<p>4.2.1 Android是一种基于Linux的自由及开放源代码的操作系统，主要使用于移动设备，如智能手机和平板电脑，由Google公司和开放手机联盟领导及开发。<br/>
4.2.2 Android平台由操作系统、中间件、用户界面和应用软件组成。<br/>
4.2.3 Android主要用于移动设备。<br/>
4.2.4 Android还提供了一个SDK用于开发Android应用程序。</p>

<h3>4.3 Android发展史</h3>

<p>4.3.1 2003年10月，Andy Rubin等人创建Android公司，并组建Android团队。<br/>
4.3.2 2005年8月17日，Google低调收购了成立仅22个月的高科技企业Android及其团队。</p>

<p>4.3.3 2007年11月5日，谷歌公司正式向外界展示了这款名为Android的操作系统，并且在这天谷歌宣布建立一个全球性的联盟组织，该组织由34家手机制造商、软件开发商、电信运营商以及芯片制造商共同组成，并与84家硬件制造商、软件开发商及电信营运商组成开放手持设备联盟（Open Handset Alliance）来共同研发改良Android系统，这一联盟将支持谷歌发布的手机操作系统以及应用软件，Google以Apache免费开源许可证的授权方式，发布了Android的源代码。</p>

<p>4.3.4 2008年，在GoogleI/O大会上，谷歌提出了AndroidHAL架构图，在同年8月18号，Android获得了美国联邦通信委员会（FCC）的批准，在2008年9月，谷歌正式发布了Android 1.0系统，这也是Android系统最早的版本。</p>

<p>4.3.5 2009年4月，谷歌正式推出了Android 1.5这款手机，从Android 1.5版本开始，谷歌开始将Android的版本以甜品的名字命名，Android 1.5命名为Cupcake（纸杯蛋糕）。该系统与Android 1.0相比有了很大的改进。</p>

<p>4.3.6 2009年9月份，谷歌发布了Android 1.6的正式版，并且推出了搭载Android 1.6正式版的手机HTC Hero（G3），凭借着出色的外观设计以及全新的Android 1.6操作系统，HTC Hero（G3）成为当时全球最受欢迎的手机。Android 1.6也有一个有趣的甜品名称，它被称为Donut（甜甜圈）。</p>

<p>4.3.7 2010年2月份，Linux内核开发者Greg Kroah-Hartman将Android的驱动程序从Linux内核“状态树”（“staging tree”）上除去，从此，Android与Linux开发主流将分道扬镳。在同年5月份，谷歌正式发布了Android 2.2操作系统。谷歌将Android 2.2操作系统命名为Froyo，翻译完名为冻酸奶。</p>

<p>4.3.8 2010年10月份，谷歌宣布Android系统达到了第一个里程碑，即电子市场上获得官方数字认证的Android应用数量已经达到了10万个，Android系统的应用增长非常迅速。在2010年12月，谷歌正式发布了Android 2.3操作系统Gingerbread （姜饼）。</p>

<p>4.3.9 2011年1月，谷歌称每日的Android设备新用户数量达到了30万部，到2011年7月，这个数字增长到55万部，而Android系统设备的用户总数达到了1.35亿，Android系统已经成为智能手机领域占有量最高的系统。</p>

<p>4.3.10 2011年8月2日，Android手机已占据全球智能机市场48%的份额，并在亚太地区市场占据统治地位，终结了Symbian（塞班系统）的霸主地位，跃居全球第一。</p>

<p>4.3.11 2011年9月份，Android系统的应用数目已经达到了48万，而在智能手机市场，Android系统的占有率已经达到了43%。继续在排在移动操作系统首位。谷歌将会发布全新的Android 4.0操作系统，这款系统被谷歌命名为Ice Cream Sandwich（冰激凌三明治）。</p>

<p>4.3.12 2012年1月6日，谷歌Android Market已有10万开发者推出超过40万活跃的应用，大多数的应用程序为免费。Android Market应用程序商店目录在新年首周周末突破40万基准，距离突破30万应用仅4个月。在2011年早些时候，Android Market从20万增加到30万应用也花了四个月。</p>

<p>4.3.13 2013年11月1日，Android4.4正式发布，从具体功能上讲，Android4.4提供了各种实用小功能，新的Android系统更智能，添加更多的Emoji表情图案，UI的改进也更现代，如全新的HelloiOS7半透明效果。</p>

<p>4.3.14 2014年10月15日（美国太平洋时间）发布的全新Android 5.0操作系统。</p>

<h3>4.4 Android的优势</h3>

<p>4.4.1 Android系统开源，方便阅读底层源代码。<br/>
4.4.2 Android开发，可以定制。<br/>
4.4.3 Android应用层是排行榜名列前茅的Java语言。<br/>
4.4.4 Android提供了真正的多任务功能。</p>

<h2>5 Android系统架构</h2>

<p>5.1 概述：Android系统采用分层架构。由内到外分别是：系统内核层、库集和安卓运行时、应用程序框架层、应用层。<br/>
5.2 系统内核层：安全，存储器管理，程序管理，网络堆栈和各种驱动程序。<br/>
5.3 库集和Android运行时：库集是用C++语言写的类库目的是为上层框架层提供如数据库管理、WebKit、媒体框架等功能。Android运行时包括核心类库，及Android虚拟机。其包含了Java JDK中绝大部分的核心API。<br/>
5.4 应用程序框架层：将库集中C++语法封装为Java语法，目的是便于上一层应用层开发。框架层提供了包管理、Activity管理、电话管理、位置管理等。<br/>
5.5 应用层：这是Android系统架构中最上层。在应用层中可以开发Android应用程序，应用层调用框架层的各种API进行Android应用开发。<br/>
5.6 硬件抽象层：在系统内核（LINUX KERNEL）和库集（LIBRARIES）之间，还有一个硬件抽象层。这层的目的是设备及内核做修改时，可以减少对库集一层的影响和修改。并且提供为上一层对内核层调用的各种描述。</p>

<h2>6 Android盈利模式</h2>

<p>6.1 软硬结合：指手机操作系统与手机硬件相结合的销售（例如小米手机）。<br/>
6.2 服务端/客户端结合：百度、新浪、腾讯等采取的盈利模式。通过自有Android开发团队，开发客户端，访问门户网站，扩大用户数，通过广告、在线购物等获利。<br/>
6.3 内嵌广告：主要是个人和小团队开发的盈利模式。通过应用程序的下载量，提高广告展示收益。（如手电筒程序）<br/>
6.4 应用内购买：软件提供基本的免费功能，高级功能收费。<br/>
6.5 免费增值：通过提供80%的免费功能和20%增值功能，获取收益。（如印象笔记）<br/>
6.6 外包型开发：通过接受Android应用程序开发任务获利（如印度外包开发）。</p>

<h2>7 Android开发相关概念</h2>

<p>7.1 SDK：即Standard Development Kits（标准开发工具包）的简称。<br/>
7.2 API：即Application Program Interface（应用程序编程接口）的简称。这里主要指SDK中相关类的方法等。<br/>
7.3 Virtual Machine：即Android虚拟机。<br/>
7.4 apk：apk是Android应用的后缀，是AndroidPackage的缩写，即Android安装包（apk）。可以将apk后缀直接改为zip，用解压缩软件即可以直接查看Android安装包中的相关文件。通过安装apk，就可以使用此Android应用程序。<br/>
7.5 dex：是Dalvik VM executes的简称，即Android Dalvik执行程序，类似于Windows中的exe文件。<br/>
7.6 ADT：是Android Develop Kits的简称，即Android开发工具包。是Eclipse的一个插件程序。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识Java]]></title>
    <link href="http://gitdeng.github.io/blog/2015/07/07/Java-profile/"/>
    <updated>2015-07-07T11:39:20+08:00</updated>
    <id>http://gitdeng.github.io/blog/2015/07/07/Java-profile</id>
    <content type="html"><![CDATA[<h2>1 Java语言概述</h2>

<p>1991年Sun公司开始研发Java语言。<br/>
1996年正式推出Java1.0。<br/>
Android的应用开发层使用的语言是Java。</p>

<h2>2 Java平台</h2>

<h3>2.1 Java SE</h3>

<pre><code>Java Platform,Standard Edition——Java平台标准版。
</code></pre>

<h3>2.2 Java EE</h3>

<pre><code>Java Platform,Enterprise Edition——Java平台企业版。
</code></pre>

<h3>2.3 Java ME</h3>

<pre><code>Java Platform,Micro Edition——Java平台微型版。
</code></pre>

<h2>3 Java语言特点</h2>

<h3>3.1 语法简明。</h3>

<h3>3.2 面向对象。</h3>

<h3>3.3 跨平台。</h3>

<h3>3.4 安全。</h3>

<h3>3.5 多线程。</h3>

<h2>4 Java语言运行机制</h2>

<h3>4.1 高级语言运行机制</h3>

<p>4.1.1 编译型语言<br/>
4.1.2 解释型语言</p>

<h3>4.2 Java语言运行机制</h3>

<p>4.2.1 编译与解释结合的语言。<br/>
4.2.2 .java：可直接阅读的源程序。<br/>
4.2.3 .class：不可直接阅读的字节码。<br/>
4.2.4 Java解释器不跨平台，.java和.class跨平台。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识Nodejs]]></title>
    <link href="http://gitdeng.github.io/blog/2015/07/07/Nodejs-profile/"/>
    <updated>2015-07-07T10:39:20+08:00</updated>
    <id>http://gitdeng.github.io/blog/2015/07/07/Nodejs-profile</id>
    <content type="html"><![CDATA[<h2>1 Nodejs的介绍</h2>

<p>JS是脚本语言，脚本语言都需要一个解析器才能运行。对于写在HTML页面里的JS，浏览器充当了解析器的角色。而对于需要独立运行的JS，NodeJS就是一个解析器。</p>

<p>Node.js是建立在Chrome的JavaScript的运行时，可方便地构建快速，可扩展的网络应用程序的平台。Node.js使用事件驱动，非阻塞I/O模型，轻量、高效，可以完美地处理时时数据，运行在不同的设备上。</p>

<p>每一种解析器都是一个运行环境，不但允许JS定义各种数据结构，进行各种计算，还允许JS使用运行环境提供的内置对象和方法做一些事情。例如运行在浏览器中的JS的用途是操作DOM，浏览器就提供了document之类的内置对象。而运行在Nodejs中的JS的用途是操作磁盘文件或搭建HTTP服务器，NodeJS就相应提供了fs、http等内置对象。</p>

<h2>2 Nodejs使用领域</h2>

<p>尽管存在一听说可以直接运行JS文件就觉得很酷的同学，但大多数同学在接触新东西时首先关心的是有啥用处，以及能带来啥价值。Nodejs的作者说，他创造NodeJS的目的是为了实现高性能Web服务器，他首先看重的是事件机制和异步IO模型的优越性，而不是JS。但是他需要选择一种编程语言实现他的想法，这种编程语言不能自带IO功能，并且需要能良好支持事件机制。JS没有自带IO功能，天生就用于处理浏览器中的 DOM事件，并且拥有一大群程序员，因此就成为了天然的选择。</p>

<p>如他所愿，Nodejs在服务端活跃起来，出现了大批基于NodeJS的Web服务。而另一方面，NodeJS让前端众如获神器，终于可以让自己的能力覆盖范围跳出浏览器窗口，更大批的前端工具如雨后春笋。</p>

<p>从<a href="https://github.com/joyent/node/wiki/Projects,-Applications,-and-Companies-Using-Node">Nodejs官方网站的企业登记页</a>来看，包括我们熟知的公司有LinkedIn, Yahoo, Paypal, eBay, Walmart，Groupon 还有很多的中小型公司，国内的公司如雪球、淘宝、网易、百度等也都有很多项目运行在Node.js之上。</p>

<p>因此，对于前端而言，虽然不是人人都要拿NodeJS写一个服务器程序，但简单可至使用命令交互模式调试JS代码片段，复杂可至编写工具提升工作效率。</p>

<h2>3 Nodejs的优势</h2>

<h3>3.1 总的来看，Nodejs的优势如下</h3>

<p>3.1.1 Nodejs基于Javascript语言，不用再单独新学一门陌生的语言，从而减低了学习的门槛。同时，Javascript语言在Web前端开发中至关重要，特别HTML5的应用必须要使用，所以前后台统一语言，不仅可以实现程序员的全栈开发，还可以统一公共类库，代码标准化。单凭这一点，Nodejs就已经赢得市场的青睐了。</p>

<p>3.1.2 Nodejs并没有重新开发运行时环境，而是选择了目前最快的浏览器内核V8作为执行引擎，保证了Nodejs的性能和稳定性。</p>

<p>3.1.3 Nodejs的开发非常高效，而且代码简单，得益于Nodejs的单线程机制。而Nodejs的另一个特点异步编程，让Nodejs处理IO密集型应用有了明显的优势。个人感觉，用Nodejs比Java做Web开发要高效10倍，比PHP的代码还要简单。</p>

<p>3.1.4 Nodejs的社区在壮大，不仅包的数量在快速增加，而且包的质量也要明显好于其他语言的。很多明星级的包，都是简单而灵巧的，为了开发者的使用习惯而设计。常用到的工具包，如socket.io, moment.js, underscore.js, async.js, express.js, bower.js, grunt.js, forever.js&hellip;&hellip;</p>

<h3>3.2 另外，ebay选择Nodejs的理由，可以归纳为以下4点：</h3>

<p>3.2.1 动态语言：开发效率非常高，并有能力构建复杂系统，如ql.io。
3.2.2 性能和I/O负载：Nodejs非常好的解决了IO密集的问题，通过异步IO来实现。
3.2.3 连接的内存开销：每个Node.js进程可以支持超过12万活跃的连接，每个连接消耗大约2K的内存。
3.2.4 操作性：实现了Nodejs对于内存堆栈的监控系统。</p>

<h2>4 Nodejs不适合的领域</h2>

<p>每一种语言或平台都有不擅长领域，对于Nodejs来说最不擅长的领域在于CPU和内存的编程操作。</p>

<p>4.1 计算密集型应用，让Javascript和C去拼计算性能，估计是不可能赢的。</p>

<p>4.2 内存控制，让Javascript和Java比较复杂数据类型定义，也是很困难的。因为Javascript的面向对象是基于JSON的，而Java是直接使用内存结构。所以，通过JSON序列化和反序列的过程控制内存，Javascript就已经输了。</p>

<p>4.3 大内存的应用，由于V8引擎有内存设计的限制，32位环境中最大堆是1G，64位环境中最大堆也不到2G，如果要一次读入10G数据，对于Nodejs来说也无法实现。</p>

<p>4.4 静态服务器，虽然Nodejs的优势在IO密集集应用，但是和Nginx的处理静态资源还是有很大的差距。</p>

<p>4.5 不需要异步的应用：比如系统管理，自行化脚本等，还是Python更顺手，Nodejs的异步调用可能会给编程带来一些麻烦。</p>

<p>*<a href="http://www.open-open.com/news/tags/Node.js">Nodejs学习资料</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识Git]]></title>
    <link href="http://gitdeng.github.io/blog/2015/07/07/Git-profile/"/>
    <updated>2015-07-07T08:39:20+08:00</updated>
    <id>http://gitdeng.github.io/blog/2015/07/07/Git-profile</id>
    <content type="html"><![CDATA[<h2>1 Git历史</h2>

<p>同生活中的许多伟大事件一样，Git诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众广的参与者。绝大多数的Linux内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。到2002年，整个项目组开始启用分布式版本控制系统BitKeeper来管理和维护代码。</p>

<p>到了 2005 年，开发BitKeeper的商业公司同Linux内核开源社区的合作关系结束，他们收回了免费使用BitKeeper的权力。这就迫使Linux开源社区（特别是Linux的缔造者Linus Torvalds）不得不吸取教训，只有开发一套属于自己的版本控制系统才不至于重蹈覆辙。他们对新的系统制订了若干目标：<br/>
（1）速度。<br/>
（2）简单的设计。<br/>
（3）对非线性开发模式的强力支持（允许上千个并行开发的分支）。<br/>
（4）完全分布式。<br/>
（5）有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）。</p>

<p>自诞生于2005年以来，Git日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。它的速度飞快，极其适合管理大项目，它还有着令人难以置信的非线性分支管理系统，可以应付各种复杂的项目开发需求。</p>

<h2>2 Git与SVN的对比</h2>

<h3>2.1 版本控制系统分类</h3>

<h4>2.1.1 本地版本控制系统</h4>

<p>其中最流行的一种叫做 rcs，现今许多计算机系统上都还看得到它的踪影。甚至在流行的 Mac OS X 系统上安装了开发者工具包之后，也可以使用 rcs 命令。它的工作原理基本上就是保存并管理文件补丁（patch）。文件补丁是一种特定格式的文本文件，记录着对应文件修订前后的内容变化。所以，根据每次修订后的补丁，rcs 可以通过不断打补丁，计算出各个版本的文件内容。</p>

<h4>2.1.2 集中式版本控制系统</h4>

<p>接下来人们又遇到一个问题，如何让在不同系统上的开发者协同工作？于是，集中化的版本控制系统（ Centralized Version Control Systems，简称 CVCS ）应运而生。这类系统，诸如 CVS，Subversion 以及 Perforce 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。</p>

<p>事分两面，有好有坏。这么做最显而易见的缺点是中央服务器的单点故障。如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。要是中央服务器的磁盘发生故障，碰巧没做备份，或者备份不够及时，就会有丢失数据的风险。</p>

<h4>2.1.3 分布式版本控制系统</h4>

<p>于是分布式版本控制系统（ Distributed Version Control System，简称 DVCS ）面世了。在这类系统中，像 Git，Mercurial，Bazaar 以及 Darcs 等，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。因为每一次的提取操作，实际上都是一次对代码仓库的完整备份。</p>

<h3>2.2 Git相对于SVN的优势</h3>

<p>2.2.1 Git是分布式的SCM，SVN是集中式。<br/>
2.2.2 Git每个历史版本存储完整的文件，SVN存储文件差异。<br/>
2.2.3 Git可离线完成大部分操作，SVN则相反。<br/>
2.2.4 Git有着更优雅的分支和合并实现。<br/>
2.2.5 Git有着更强的撤销修改和修改版本历史的能力。<br/>
2.2.6 Git速度更快，效率更高。</p>

<h2>3.为什么要学会使用Git</h2>

<p>当今更多的开源项目迁移到了GitHub这类平台上面，要研究这些开源项目就必须学习Git。而且，现在越来越多的公司采用Git来进行版本控制，掌握Git可以提升求职竞争力。</p>

<p>*<a href="http://git-scm.com/book/zh/v1">Git官方中文简体学习手册</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识SVN]]></title>
    <link href="http://gitdeng.github.io/blog/2015/07/06/svn-profile/"/>
    <updated>2015-07-06T22:39:20+08:00</updated>
    <id>http://gitdeng.github.io/blog/2015/07/06/svn-profile</id>
    <content type="html"><![CDATA[<h2>1 SVN的介绍</h2>

<p>SVN是Subversion的简称，是一个开放源代码的版本控制系统，相较于RCS、CVS（现在已经不流行了），它采用了分支管理系统，它的设计目标就是取代CVS。互联网上很多版本控制服务已从CVS迁移到Subversion。平时我们在开发的过程中以及团队的配合中，SVN应用的特别多，所以我们要熟练的使用SVN开发分支、合并主干、处理分支。</p>

<h3>1.1 SVN原理</h3>

<p>通俗的理解是：<br/>
（1）SVN有一条“主干”保存最新版本，不允许直接往上提交。<br/>
（2）每个用户在使用前，都需要从主干上某个时间点拉下对应的一个“分支”。<br/>
（3）当每个用户修改完成新版本准备提交时，需要检查主干上是否存在“其拉下分支后其他用户的新的提交”。如果有，则需要再次从最新节点处拉下新分支重新整合“提交”；如果没有，则可以直接“提交”。<br/>
（4）同时，SVN中存在一个“tags”，它是每个用户提交上线关键点的“备份”，用于执行发现问题时的回滚等操作。</p>

<h2>2 SVN和Git的比较</h2>

<p>SVN基于文件夹的操作，Git是基于流式的操作。</p>

<h2>3 SVN的安装</h2>

<p>在Windows平台上多使用TortoiseSVN这款SVN工具。</p>

<p>TortoiseSVN（俗称“小乌龟”）是Subversion版本控制系统的一个免费开源客户端，可以超越时间的管理文件和目录。文件保存在中央版本库，除了能记住文件和目录的每次修改以外，版本库非常像普通的文件服务器。你可以将文件恢复到过去的版本，并且可以通过检查历史知道数据做了哪些修改，谁做的修改。这就是为什么许多人将Subversion和版本控制系统看作一种“时间机器”。</p>

<p><em><a href="http://tortoisesvn.net/">TortoiseSVN官方网站</a><br/>
</em><a href="http://www.cnblogs.com/xilentz/archive/2010/05/06/1728945.html">TotoiseSVN的基本使用方法</a></p>
]]></content>
  </entry>
  
</feed>
