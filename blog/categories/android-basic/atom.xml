<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android_basic | 程序员笔记]]></title>
  <link href="http://gitdeng.github.io/blog/categories/android-basic/atom.xml" rel="self"/>
  <link href="http://gitdeng.github.io/"/>
  <updated>2015-07-19T01:15:02+08:00</updated>
  <id>http://gitdeng.github.io/</id>
  <author>
    <name><![CDATA[程序员笔记]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[动态注册和注销BroadcastReceiver]]></title>
    <link href="http://gitdeng.github.io/blog/2015/07/19/Dynamic%20registration%20and%20cancellation%20BroadcastReceiver/"/>
    <updated>2015-07-19T01:39:20+08:00</updated>
    <id>http://gitdeng.github.io/blog/2015/07/19/Dynamic registration and cancellation BroadcastReceiver</id>
    <content type="html"><![CDATA[<h2>BroadcastReceiver简介</h2>

<p>BroadcastReceiver 是Android 四大基本组件之一，用于接收广播信息，如：开屏、锁屏、短信等等，在实际工作中用途非常广泛。</p>

<h2>动态注册和注销BroadcastReceiver</h2>

<p>有的情况下，我们不希望BroadcastReceiver始终处于侦听状态，这时就需要会注册和注销BroadcastReceiver。</p>

<h3>1 MainActivity.java</h3>

<pre><code>package cn.loverobots.learnbroadcastreceiver;

import android.content.Intent;
import android.content.IntentFilter;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.view.View;

public class MainActivity extends ActionBarActivity implements View.OnClickListener {

    private MyReceiver receiver = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        findViewById(R.id.btnSendMsg).setOnClickListener(this);
        findViewById(R.id.btnReg).setOnClickListener(this);
        findViewById(R.id.btnUnreg).setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        switch(v.getId()){
            case R.id.btnSendMsg:
//                Intent i = new Intent(this,MyReceiver.class);
                //这时只能隐式Intent传递数据了
                Intent i = new Intent(MyReceiver.ACTION);
                i.putExtra("data","JACK的机器人");
                sendBroadcast(i);
                break;
            case R.id.btnReg:
                //为避免重复注册操作，加入判断条件
                if(receiver == null){
                    //初始化receiver
                    receiver = new MyReceiver();
                    registerReceiver(receiver,new IntentFilter(MyReceiver.ACTION));
                    System.out.println("注册了接收器");
                }
                break;
            case R.id.btnUnreg:
                if(receiver != null){
                    unregisterReceiver(receiver);
                    receiver = null;
                    System.out.println("注消了接收器");
                }
                break;
        }
    }
}
</code></pre>

<h3>2 MyReceiver.java</h3>

<pre><code>package cn.loverobots.learnbroadcastreceiver;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;

public class MyReceiver extends BroadcastReceiver {

    public static final String ACTION = "cn.loverobots.learnbroadcastreceiver.intent.action.MyReceiver";

    public MyReceiver() {
    }

    @Override
    public void onReceive(Context context, Intent intent) {
        System.out.println("接收到了消息，消息的内容是："+intent.getStringExtra("data"));
    }
}
</code></pre>

<h3>3 activity_main.xml</h3>

<pre><code>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:orientation="vertical"
    tools:context=".MainActivity"&gt;

    &lt;TextView
        android:text="@string/hello_world"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="发送消息"
        android:id="@+id/btnSendMsg" /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="注册接收器"
        android:id="@+id/btnReg" /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="注销接收器"
        android:id="@+id/btnUnreg" /&gt;

&lt;/LinearLayout&gt;
</code></pre>

<h3>4 AndroidMainfest.xml</h3>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="cn.loverobots.learnbroadcastreceiver" &gt;

    &lt;application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/AppTheme" &gt;
        &lt;activity
            android:name=".MainActivity"
            android:label="@string/app_name" &gt;
            &lt;intent-filter&gt;
                &lt;action android:name="android.intent.action.MAIN" /&gt;

                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;

    &lt;/application&gt;

&lt;/manifest&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跨应用绑定Servic并通信]]></title>
    <link href="http://gitdeng.github.io/blog/2015/07/18/Cross-application-binding-Service-and-communication/"/>
    <updated>2015-07-18T04:39:20+08:00</updated>
    <id>http://gitdeng.github.io/blog/2015/07/18/Cross-application-binding-Service-and-communication</id>
    <content type="html"><![CDATA[<p>跨应用绑定Service的目的就是为了数据通信，如果不进行数据通信，跨应用绑定Service也就没有意义了。</p>

<h2>实现方法</h2>

<h3>（app中）</h3>

<h3>1 增加AIDL接口的抽象方法</h3>

<pre><code>// IAppServiceRemoteBinder.aidl
package cn.loverobots.startservicefromanotherapp;

// Declare any non-default types here with import statements
interface IAppServiceRemoteBinder {
    /**
     * Demonstrates some basic types that you can use as parameters
     * and return values in AIDL.
     */
    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,
            double aDouble, String aString);
    //步骤1 增加接口抽象方法
    void setData(String data);
}
</code></pre>

<h3>2 AppService.java中实现接口抽象方法并增加测试线程</h3>

<pre><code>package cn.loverobots.startservicefromanotherapp;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.os.RemoteException;

public class AppService extends Service {

    private String data = "默认文本";
    private boolean running = false;

    public AppService() {
    }

    @Override
    public IBinder onBind(Intent intent) {

        return new IAppServiceRemoteBinder.Stub() {
            @Override
            public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, String aString) throws RemoteException {

            }
            //步骤2 实现接口抽象方法
            @Override
            public void setData(String data) throws RemoteException {
                AppService.this.data = data;
            }

        };
    }

    @Override
    public void onCreate() {
        super.onCreate();
        System.out.println("Service Started");
        //步骤3 添加测试线程
        new Thread(){
            @Override
            public void run() {
                super.run();
                running = true;
                while (running){
                    System.out.println(data);
                    try {
                        sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }.start();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        System.out.println("Service Destroyed");
        //步骤4 摧毁线程同时不再输出文本
        running = false;
    }
}
</code></pre>

<h3>（anotherapp中）</h3>

<h3>3 增加同步测试数据按钮</h3>

<pre><code>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:orientation="vertical"
    tools:context=".MainActivity"&gt;

    &lt;TextView
        android:text="跨应用启动服务测试"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="启动外部服务"
        android:id="@+id/btnStartService" /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="停止外部服务"
        android:id="@+id/btnStopService" /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="绑定外部服务"
        android:id="@+id/btnBindAppService" /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="解除绑定外部服务"
        android:id="@+id/btnUnbindAppService" /&gt;
    //步骤5 增加同步测试数据按钮
    &lt;EditText
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="这是另一个应用中的数据"
        android:id="@+id/etInput" /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="同步数据到绑定的服务中"
        android:id="@+id/btnSync" /&gt;
&lt;/LinearLayout&gt;
</code></pre>

<h3>4 从app中将aidl文件复制至anotherapp中（包名需保持一致）</h3>

<pre><code>// IAppServiceRemoteBinder.aidl
package cn.loverobots.startservicefromanotherapp;

// Declare any non-default types here with import statements
//步骤8 拷贝另一个应用中的aidl文件至当前应用中，需保证包名一致。然后Rebuild Project。
interface IAppServiceRemoteBinder {
    /**
     * Demonstrates some basic types that you can use as parameters
     * and return values in AIDL.
     */
    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,
            double aDouble, String aString);

    void setData(String data);
}
</code></pre>

<h3>5 修改MainActivity.java</h3>

<pre><code>package cn.loverobots.anotherapp;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.IBinder;
import android.os.RemoteException;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.EditText;

import cn.loverobots.startservicefromanotherapp.IAppServiceRemoteBinder;

public class MainActivity extends ActionBarActivity implements View.OnClickListener, ServiceConnection {

    private Intent ServiceIntent;
    private EditText etInput;
    private IAppServiceRemoteBinder binder = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        //步骤7 设置接收编辑文本框数据的对象
        etInput = (EditText) findViewById(R.id.etInput);

        ServiceIntent = new Intent();
        //显式Intent方式启动Service
        ServiceIntent.setComponent(new ComponentName("cn.loverobots.startservicefromanotherapp","cn.loverobots.startservicefromanotherapp.AppService"));

        findViewById(R.id.btnStartService).setOnClickListener(this);
        findViewById(R.id.btnStopService).setOnClickListener(this);

        findViewById(R.id.btnBindAppService).setOnClickListener(this);
        findViewById(R.id.btnUnbindAppService).setOnClickListener(this);
        //步骤6 绑定同步数据按钮监听事件
        findViewById(R.id.btnSync).setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.btnStartService:
                startService(ServiceIntent);
                break;
            case R.id.btnStopService:
                stopService(ServiceIntent);
                break;

            case R.id.btnBindAppService:
                bindService(ServiceIntent,this, Context.BIND_AUTO_CREATE);
                break;
            case R.id.btnUnbindAppService:
                unbindService(this);
                binder = null;
                break;
            case R.id.btnSync:
                //步骤9 将文本编辑框中数据通过binder方式传入
                if(binder != null){
                    try {
                        binder.setData(etInput.getText().toString());
                    } catch (RemoteException e) {
                        e.printStackTrace();
                    }
                }
                break;
        }
    }

    @Override
    public void onServiceConnected(ComponentName name, IBinder service) {
        System.out.println("Bind Service");
        System.out.println(service);
        //步骤10 绑定服务时，将获取的binder传入。
        //不能使用binder = (IAppServiceRemoteBinder) service;直接进行强制类型转换，因为两者内存地址不一样
        binder = IAppServiceRemoteBinder.Stub.asInterface(service);
    }

    @Override
    public void onServiceDisconnected(ComponentName name) {
        System.out.println("Unbind Service");
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跨应用绑定Service]]></title>
    <link href="http://gitdeng.github.io/blog/2015/07/18/Cross-application-binding-Service/"/>
    <updated>2015-07-18T03:39:20+08:00</updated>
    <id>http://gitdeng.github.io/blog/2015/07/18/Cross-application-binding-Service</id>
    <content type="html"><![CDATA[<h2>1 建立AIDL服务的步骤</h2>

<p>建立AIDL服务要比建立普通的服务复杂一些，具体步骤如下：<br/>
2.1 在Eclipse Android工程的Java包目录中建立一个扩展名为aidl的文件。该文件的语法类似于Java代码，但会稍有不同。<br/>
2.2 如果aidl文件的内容是正确的，ADT会自动生成一个Java接口文件（*.java）。<br/>
2.3 建立一个服务类（Service的子类）。<br/>
2.4 实现由aidl文件生成的Java接口。<br/>
2.5 在AndroidManifest.xml文件中配置AIDL服务，尤其要注意的是，<action>标签中android:name的属性值就是客户端要引用该服务的ID，也就是Intent类的参数值。</p>

<h2>2 跨应用绑定Service</h2>

<p>无法从其它的应用程序里面访问另一个应用程序里面的某一个类的定义，所以Android专门提供了一种机制，即AIDL——Android接口定义语言。</p>

<h3>2.1 创建aidl文件(IAppServiceRemoteBinder.aidl)</h3>

<p>模块名上右键创建AIDL File
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// IAppServiceRemoteBinder.aidl
</span><span class='line'>package cn.loverobots.startservicefromanotherapp;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;// Declare any non-default types here with import statements
</span><span class='line'>//步骤1 创建aidl文件
</span><span class='line'>interface IAppServiceRemoteBinder {
</span><span class='line'>    /&lt;em&gt;*
</span><span class='line'>     * Demonstrates some basic types that you can use as parameters
</span><span class='line'>     * and return values in AIDL.
</span><span class='line'>     &lt;/em&gt;/
</span><span class='line'>    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,
</span><span class='line'>            double aDouble, String aString);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<h3>2.2 当前模块下的AppService类实现aidl接口</h3>

<pre><code>package cn.loverobots.startservicefromanotherapp;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.os.RemoteException;

public class AppService extends Service {
    public AppService() {
    }

    @Override
    public IBinder onBind(Intent intent) {
        //步骤2 实现aidl接口
        return new IAppServiceRemoteBinder.Stub() {
            @Override
            public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, String aString) throws RemoteException {

            }
        };
    }

    @Override
    public void onCreate() {
        super.onCreate();
        System.out.println("Service Started");
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        System.out.println("Service Destroyed");
    }
}
</code></pre>

<h3>2.3 在anotherapp中布局文件（activity_main.xml）添加绑定及解绑服务按钮</h3>

<pre><code>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:orientation="vertical"
    tools:context=".MainActivity"&gt;

    &lt;TextView
        android:text="跨应用启动服务测试"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="启动外部服务"
        android:id="@+id/btnStartService" /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="停止外部服务"
        android:id="@+id/btnStopService" /&gt;
    &lt;!--步骤3 添加绑定及解绑服务按钮--&gt;
    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="绑定外部服务"
        android:id="@+id/btnBindAppService" /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="解除绑定外部服务"
        android:id="@+id/btnUnbindAppService" /&gt;
&lt;/LinearLayout&gt;
</code></pre>

<h3>2.4 给按钮添加监听事件响应(anotherapp中的MainActivity.java)</h3>

<pre><code>package cn.loverobots.anotherapp;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.IBinder;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.view.View;

public class MainActivity extends ActionBarActivity implements View.OnClickListener, ServiceConnection {

    private Intent ServiceIntent;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        ServiceIntent = new Intent();
        //显式Intent方式启动Service
        ServiceIntent.setComponent(new ComponentName("cn.loverobots.startservicefromanotherapp","cn.loverobots.startservicefromanotherapp.AppService"));

        findViewById(R.id.btnStartService).setOnClickListener(this);
        findViewById(R.id.btnStopService).setOnClickListener(this);
        //步骤4
        findViewById(R.id.btnBindAppService).setOnClickListener(this);
        findViewById(R.id.btnUnbindAppService).setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.btnStartService:
                startService(ServiceIntent);
                break;
            case R.id.btnStopService:
                stopService(ServiceIntent);
                break;
            //步骤5
            case R.id.btnBindAppService:
                bindService(ServiceIntent,this, Context.BIND_AUTO_CREATE);
                break;
            case R.id.btnUnbindAppService:
                unbindService(this);
                break;
        }
    }
    //步骤6
    @Override
    public void onServiceConnected(ComponentName name, IBinder service) {
        System.out.println("Bind Service");
        System.out.println(service);
    }

    @Override
    public void onServiceDisconnected(ComponentName name) {
        System.out.println("Unbind Service");
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跨应用启动Service]]></title>
    <link href="http://gitdeng.github.io/blog/2015/07/18/Cross-application-startup-Service/"/>
    <updated>2015-07-18T00:39:20+08:00</updated>
    <id>http://gitdeng.github.io/blog/2015/07/18/Cross-application-startup-Service</id>
    <content type="html"><![CDATA[<h2>Android中AIDL的理解</h2>

<h3>1 什么是AIDL</h3>

<p>Android系统中的进程之间不能共享内存，因此，需要提供一些机制在不同进程之间进行数据通信。为了使其他的应用程序也可以访问本应用程序提供的服务，Android系统采用了远程过程调用（Remote Procedure Call，RPC）方式来实现。与很多其他的基于RPC的解决方案一样，Android使用一种接口定义语言（Interface Definition Language，IDL）来公开服务的接口。<br/>
我们知道4个Android应用程序组件中的3个（Activity、BroadcastReceiver和ContentProvider）都可以进行跨进程访问，另外一个Android应用程序组件Service同样可以。因此，可以将这种可以跨进程访问的服务称为AIDL（Android Interface Definition Language）服务。</p>

<h3>2 跨应用启动Service</h3>

<p>从Android 5.0开始，如果想启动服务，必须使用显式Intent，不能够使用隐式Intent。</p>

<h2>跨应用启动Service</h2>

<h3>app模块</h3>

<h4>1 AndroidManifest.xml</h4>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="cn.loverobots.startservicefromanotherapp" &gt;

    &lt;application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/AppTheme" &gt;
        &lt;activity
            android:name=".MainActivity"
            android:label="@string/app_name" &gt;
            &lt;intent-filter&gt;
                &lt;action android:name="android.intent.action.MAIN" /&gt;
                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;

        &lt;service
            android:name=".AppService"
            android:enabled="true"
            android:exported="true" &gt;
        &lt;/service&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
</code></pre>

<h4>2 MainActivity(继承Activity)</h4>

<pre><code>package cn.loverobots.startservicefromanotherapp;

import android.content.Intent;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;

public class MainActivity extends ActionBarActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        startService(new Intent(this,AppService.class));
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        stopService(new Intent(this,AppService.class));
    }
}
</code></pre>

<h4>3 AppService(继承Service)</h4>

<pre><code>package cn.loverobots.startservicefromanotherapp;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;

public class AppService extends Service {
    public AppService() {
    }

    @Override
    public IBinder onBind(Intent intent) {
        // TODO: Return the communication channel to the service.
        throw new UnsupportedOperationException("Not yet implemented");
    }

    @Override
    public void onCreate() {
        super.onCreate();
        System.out.println("Service Started");
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        System.out.println("Service Destroyed");
    }
}
</code></pre>

<h4>4 activity_main.xml</h4>

<pre><code>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingBottom="@dimen/activity_vertical_margin" tools:context=".MainActivity"&gt;

    &lt;TextView android:text="@string/hello_world" android:layout_width="wrap_content"
        android:layout_height="wrap_content" /&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<h3>anotherapp模块</h3>

<h4>1 MainActivity(继承Activity，实现View.OnClickListener)</h4>

<pre><code>package cn.loverobots.anotherapp;

import android.content.ComponentName;
import android.content.Intent;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.view.View;

public class MainActivity extends ActionBarActivity implements View.OnClickListener {

    private Intent ServiceIntent;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        ServiceIntent = new Intent();
        //显式Intent方式启动Service
        ServiceIntent.setComponent(new ComponentName("cn.loverobots.startservicefromanotherapp","cn.loverobots.startservicefromanotherapp.AppService"));

        findViewById(R.id.btnStartService).setOnClickListener(this);
        findViewById(R.id.btnStopService).setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.btnStartService:
                startService(ServiceIntent);
                break;
            case R.id.btnStopService:
                stopService(ServiceIntent);
                break;
        }
    }
}
</code></pre>

<h4>2 activity_main.xml</h4>

<pre><code>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:orientation="vertical"
    tools:context=".MainActivity"&gt;

    &lt;TextView
        android:text="跨应用启动服务测试"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="启动服务"
        android:id="@+id/btnStartService" /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="停止服务"
        android:id="@+id/btnStopService" /&gt;

&lt;/LinearLayout&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[绑定Service进行通信（如何侦听Service的内部状态）]]></title>
    <link href="http://gitdeng.github.io/blog/2015/07/14/Service-is-bound-to-communicate-how-to-listen-to-the-internal-state-of-the-Service/"/>
    <updated>2015-07-14T00:39:20+08:00</updated>
    <id>http://gitdeng.github.io/blog/2015/07/14/Service-is-bound-to-communicate-how-to-listen-to-the-internal-state-of-the-Service</id>
    <content type="html"><![CDATA[<p>通过回调机制实现。当内部数据发生改变时，通知外部进行数据修改。</p>

<h2>示例代码</h2>

<h3>1 MainActivity（继承Activity，并实现View.OnClickListener, ServiceConnection）</h3>

<pre><code>    package cn.loverobots.connectservice;

    import android.content.ComponentName;
    import android.content.Context;
    import android.content.Intent;
    import android.content.ServiceConnection;
    import android.os.Handler;
    import android.os.IBinder;
    import android.os.Message;
    import android.os.Bundle;
    import android.support.v7.app.AppCompatActivity;
    import android.view.View;
    import android.widget.EditText;
    import android.widget.TextView;

    public class MainActivity extends AppCompatActivity implements View.OnClickListener, ServiceConnection {

        private EditText editText;
        private Intent intent;
        private MyService.Binder binder = null;
        //步骤1
        private TextView textViewOut;

        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_main);
            editText = (EditText) findViewById(R.id.editText);
            textViewOut = (TextView) findViewById(R.id.textViewOut);
            findViewById(R.id.btnStartService).setOnClickListener(this);
            findViewById(R.id.btnStopService).setOnClickListener(this);
            findViewById(R.id.btnBindService).setOnClickListener(this);
            findViewById(R.id.btnUnbindService).setOnClickListener(this);
            findViewById(R.id.btnSyncData).setOnClickListener(this);
        }

        @Override
        public void onClick(View v) {
            switch (v.getId()){
                case R.id.btnStartService:
                    System.out.println("启动服务");
                    intent = new Intent(this,MyService.class);
                    //传递名为“etData”的字符串类型的数据
                    intent.putExtra("etData", editText.getText().toString());
                    startService(intent);
                    break;
                case R.id.btnStopService:
                    System.out.println("停止服务");
                    stopService(new Intent(this,MyService.class));
                    break;
                case R.id.btnBindService:
                    bindService(new Intent(this,MyService.class),this, Context.BIND_AUTO_CREATE);
                    break;
                case R.id.btnUnbindService:
                    unbindService(this);
                    break;
                case R.id.btnSyncData:
                    if(binder!=null){
                        binder.setData(editText.getText().toString());
                    }
                    break;
            }
        }

        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            //接收来自MyService的Binder中的数据
            binder = (MyService.Binder) service;
            //步骤7
            binder.getService().setCallBack(new MyService.CallBack() {
                @Override
                public void onDataChange(String data) {
                    //textViewOut.setText(data);
                    //此处不能直接写,因为Android中有一个安全机制，即UI线程不允许其它辅线程直接修改UI线程的资源
                    //步骤9
                    Message msg = new Message();
                    Bundle bundle = new Bundle();
                    bundle.putString("data",data);
                    msg.setData(bundle);
                    handler.sendMessage(msg);
                }
            });
        }

        @Override
        public void onServiceDisconnected(ComponentName name) {

        }
        //步骤8
        private Handler handler = new Handler(){
            @Override
            public void handleMessage(Message msg) {
                super.handleMessage(msg);
                //步骤10
                textViewOut.setText(msg.getData().getString("data"));
            }
        };
    }
</code></pre>

<h3>2 MyService(继承Service)</h3>

<pre><code>    package cn.loverobots.connectservice;

    import android.app.Service;
    import android.content.Intent;
    import android.os.IBinder;

    public class MyService extends Service {
        private static boolean ServiceRunning = false;
        private String etData = "默认文本";
        public MyService() {
        }

        @Override
        public IBinder onBind(Intent intent) {
            return new Binder();
        }
        //创建一个Binder对象继承系统中的Binder类，并创建一个传递数据的方法setData
        public class Binder extends android.os.Binder{
            public void setData(String etData){
                MyService.this.etData = etData;
            }
            //步骤6
            public MyService getService(){
                return MyService.this;
            }
        }

        @Override
        public int onStartCommand(Intent intent, int flags, int startId) {
            etData = intent.getStringExtra("etData");
            return super.onStartCommand(intent, flags, startId);
        }

        @Override
        public void onCreate() {
            super.onCreate();
            System.out.println("服务创建");
            ServiceRunning = true;
            new Thread(){
                @Override
                public void run() {
                    super.run();
                    //步骤4
                    int i = 0;
                    while (ServiceRunning){
                        i++;
                        String str = i+"："+etData;
                        System.out.println(str);
                        //步骤5
                        if(callBack!=null){
                            callBack.onDataChange(str);
                        }
                        try {
                            sleep(1000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }.start();
        }

        @Override
            public void onDestroy() {
            super.onDestroy();
            System.out.println("服务停止");
            ServiceRunning = false;
        }
        //步骤3
        private CallBack callBack = null;

        public void setCallBack(CallBack callBack) {
            this.callBack = callBack;
        }

        public CallBack getCallBack() {
            return callBack;
        }
        //步骤2
        public static interface CallBack{
            void onDataChange(String data);
        }
    }
</code></pre>

<h3>3 activity_main.xml</h3>

<pre><code>    &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
        android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
        android:paddingRight="@dimen/activity_horizontal_margin"
        android:paddingTop="@dimen/activity_vertical_margin"
        android:paddingBottom="@dimen/activity_vertical_margin"
        android:orientation="vertical"
        tools:context=".MainActivity"&gt;

        &lt;TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="内部输出至外部测试文本"
            android:id="@+id/textViewOut" /&gt;

        &lt;EditText
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="默认文本"
            android:id="@+id/editText" /&gt;

        &lt;Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="启动服务"
            android:id="@+id/btnStartService" /&gt;

        &lt;Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="停止服务"
            android:id="@+id/btnStopService" /&gt;

        &lt;Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="绑定服务"
            android:id="@+id/btnBindService" /&gt;

        &lt;Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="解除绑定服务"
            android:id="@+id/btnUnbindService" /&gt;

        &lt;Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="同步数据"
            android:id="@+id/btnSyncData" /&gt;
    &lt;/LinearLayout&gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
