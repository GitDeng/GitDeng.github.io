<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Version_control | 程序员笔记]]></title>
  <link href="http://gitdeng.github.io/blog/categories/version-control/atom.xml" rel="self"/>
  <link href="http://gitdeng.github.io/"/>
  <updated>2015-07-18T17:02:12+08:00</updated>
  <id>http://gitdeng.github.io/</id>
  <author>
    <name><![CDATA[程序员笔记]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[认识Git]]></title>
    <link href="http://gitdeng.github.io/blog/2015/07/07/Git-profile/"/>
    <updated>2015-07-07T08:39:20+08:00</updated>
    <id>http://gitdeng.github.io/blog/2015/07/07/Git-profile</id>
    <content type="html"><![CDATA[<h2>1 Git历史</h2>

<p>同生活中的许多伟大事件一样，Git诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众广的参与者。绝大多数的Linux内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。到2002年，整个项目组开始启用分布式版本控制系统BitKeeper来管理和维护代码。</p>

<p>到了 2005 年，开发BitKeeper的商业公司同Linux内核开源社区的合作关系结束，他们收回了免费使用BitKeeper的权力。这就迫使Linux开源社区（特别是Linux的缔造者Linus Torvalds）不得不吸取教训，只有开发一套属于自己的版本控制系统才不至于重蹈覆辙。他们对新的系统制订了若干目标：<br/>
（1）速度。<br/>
（2）简单的设计。<br/>
（3）对非线性开发模式的强力支持（允许上千个并行开发的分支）。<br/>
（4）完全分布式。<br/>
（5）有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）。</p>

<p>自诞生于2005年以来，Git日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。它的速度飞快，极其适合管理大项目，它还有着令人难以置信的非线性分支管理系统，可以应付各种复杂的项目开发需求。</p>

<h2>2 Git与SVN的对比</h2>

<h3>2.1 版本控制系统分类</h3>

<h4>2.1.1 本地版本控制系统</h4>

<p>其中最流行的一种叫做 rcs，现今许多计算机系统上都还看得到它的踪影。甚至在流行的 Mac OS X 系统上安装了开发者工具包之后，也可以使用 rcs 命令。它的工作原理基本上就是保存并管理文件补丁（patch）。文件补丁是一种特定格式的文本文件，记录着对应文件修订前后的内容变化。所以，根据每次修订后的补丁，rcs 可以通过不断打补丁，计算出各个版本的文件内容。</p>

<h4>2.1.2 集中式版本控制系统</h4>

<p>接下来人们又遇到一个问题，如何让在不同系统上的开发者协同工作？于是，集中化的版本控制系统（ Centralized Version Control Systems，简称 CVCS ）应运而生。这类系统，诸如 CVS，Subversion 以及 Perforce 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。</p>

<p>事分两面，有好有坏。这么做最显而易见的缺点是中央服务器的单点故障。如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。要是中央服务器的磁盘发生故障，碰巧没做备份，或者备份不够及时，就会有丢失数据的风险。</p>

<h4>2.1.3 分布式版本控制系统</h4>

<p>于是分布式版本控制系统（ Distributed Version Control System，简称 DVCS ）面世了。在这类系统中，像 Git，Mercurial，Bazaar 以及 Darcs 等，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。因为每一次的提取操作，实际上都是一次对代码仓库的完整备份。</p>

<h3>2.2 Git相对于SVN的优势</h3>

<p>2.2.1 Git是分布式的SCM，SVN是集中式。<br/>
2.2.2 Git每个历史版本存储完整的文件，SVN存储文件差异。<br/>
2.2.3 Git可离线完成大部分操作，SVN则相反。<br/>
2.2.4 Git有着更优雅的分支和合并实现。<br/>
2.2.5 Git有着更强的撤销修改和修改版本历史的能力。<br/>
2.2.6 Git速度更快，效率更高。</p>

<h2>3.为什么要学会使用Git</h2>

<p>当今更多的开源项目迁移到了GitHub这类平台上面，要研究这些开源项目就必须学习Git。而且，现在越来越多的公司采用Git来进行版本控制，掌握Git可以提升求职竞争力。</p>

<p>*<a href="http://git-scm.com/book/zh/v1">Git官方中文简体学习手册</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识SVN]]></title>
    <link href="http://gitdeng.github.io/blog/2015/07/06/svn-profile/"/>
    <updated>2015-07-06T22:39:20+08:00</updated>
    <id>http://gitdeng.github.io/blog/2015/07/06/svn-profile</id>
    <content type="html"><![CDATA[<h2>1 SVN的介绍</h2>

<p>SVN是Subversion的简称，是一个开放源代码的版本控制系统，相较于RCS、CVS（现在已经不流行了），它采用了分支管理系统，它的设计目标就是取代CVS。互联网上很多版本控制服务已从CVS迁移到Subversion。平时我们在开发的过程中以及团队的配合中，SVN应用的特别多，所以我们要熟练的使用SVN开发分支、合并主干、处理分支。</p>

<h3>1.1 SVN原理</h3>

<p>通俗的理解是：<br/>
（1）SVN有一条“主干”保存最新版本，不允许直接往上提交。<br/>
（2）每个用户在使用前，都需要从主干上某个时间点拉下对应的一个“分支”。<br/>
（3）当每个用户修改完成新版本准备提交时，需要检查主干上是否存在“其拉下分支后其他用户的新的提交”。如果有，则需要再次从最新节点处拉下新分支重新整合“提交”；如果没有，则可以直接“提交”。<br/>
（4）同时，SVN中存在一个“tags”，它是每个用户提交上线关键点的“备份”，用于执行发现问题时的回滚等操作。</p>

<h2>2 SVN和Git的比较</h2>

<p>SVN基于文件夹的操作，Git是基于流式的操作。</p>

<h2>3 SVN的安装</h2>

<p>在Windows平台上多使用TortoiseSVN这款SVN工具。</p>

<p>TortoiseSVN（俗称“小乌龟”）是Subversion版本控制系统的一个免费开源客户端，可以超越时间的管理文件和目录。文件保存在中央版本库，除了能记住文件和目录的每次修改以外，版本库非常像普通的文件服务器。你可以将文件恢复到过去的版本，并且可以通过检查历史知道数据做了哪些修改，谁做的修改。这就是为什么许多人将Subversion和版本控制系统看作一种“时间机器”。</p>

<p><em><a href="http://tortoisesvn.net/">TortoiseSVN官方网站</a><br/>
</em><a href="http://www.cnblogs.com/xilentz/archive/2010/05/06/1728945.html">TotoiseSVN的基本使用方法</a></p>
]]></content>
  </entry>
  
</feed>
